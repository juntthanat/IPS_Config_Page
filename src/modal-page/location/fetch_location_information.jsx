import { useState, useEffect, useContext } from "react";
import ConfirmCancelButton from "../../confirm-cancel-button/confirm_cancel_button";
import EditLocationInformation from "./edit_location_information";
import CreateLocationInformation from "./create_location_information";
import DeleteLocationInformation from "./delete_location_information";
import { RerenderContext } from "../../App";

export default function FetchLocationInformation(props) {
  const { selectedLocation, buttonType, switchShowModal, selectedFloor } =
    props ?? {};
  const { rerender } = useContext(RerenderContext);
  const baseURL = `http://marco.cooldev.win:8080/api/v1`;

  const [getLocationName, setGetLocationName] = useState("");
  const [getLocationGeoX, setGetLocationGeoX] = useState("");
  const [getLocationGeoY, setGetLocationGeoY] = useState("");

  const [userConfirm, setUserConfirm] = useState(false);

  const fetchInfo = async () => {
    return await fetch(baseURL + `/locations` + "/" + selectedLocation)
      .then((e) => e.json())
      .then((d) => JSON.parse(JSON.stringify(d)))
      .then((f) => {
        setGetLocationName(f.name);
        setGetLocationGeoX(f.geoX);
        setGetLocationGeoY(f.geoY);
      });
  };

  const handleNameChange = (event) => {
    setGetLocationName(event.target.value);
  };
  const handleGeoXChange = (event) => {
    setGetLocationGeoX(event.target.value);
  };
  const handleGeoYChange = (event) => {
    setGetLocationGeoY(event.target.value);
  };

  const checkUserInput = () => {
    if (
      getLocationName != "" &&
      getLocationGeoX != "" &&
      getLocationGeoY != ""
    ) {
      return true;
    }
    return false;
  };

  useEffect(() => {
    if (userConfirm === true && checkUserInput() == true) {
      if (buttonType === "create") {
        CreateLocationInformation(
          getLocationName,
          getLocationGeoX,
          getLocationGeoY,
          selectedFloor,
          () => {
            rerender();
          }
        );
      } else if (buttonType === "edit") {
        EditLocationInformation(
          selectedLocation,
          getLocationName,
          getLocationGeoX,
          getLocationGeoY,
          () => {
            rerender();
          }
        );
      } else {
        DeleteLocationInformation(selectedLocation, () => {
          rerender();
        });
      }
      switchShowModal();
    }
    setUserConfirm(false);
  }, [userConfirm]);

  useEffect(() => {
    if (buttonType === "edit") {
      fetchInfo();
    } else if (buttonType === "create") {
      console.log("Create Section");
    } else {
      fetchInfo();
    }
  }, []);
  

  return (
    <div>
      <div
        style={{
          display: buttonType === "delete" ? "flex" : "none",
          alignItems: "center",
          justifyContent: "center",
          fontWeight: "bold",
          fontSize: "xxxl",
        }}
      >
        Are You Sure? -_-
      </div>
      <div className="location-id-header">
        {buttonType === "create"
          ? "LOCATION ID AUTOGENERATED"
          : "FLOOR ID " + selectedLocation}
      </div>
      <div className="location-input-configuration">
        LOCATION NAME{" "}
        <input
          defaultValue={buttonType === "create" ? null : getLocationName}
          onChange={handleNameChange}
          style={{
            border:
              getLocationName === "" ? "solid red 2px" : "solid black 2px",
          }}
          placeholder={
            getLocationName === "" ? "Please Enter Location Name" : ""
          }
          disabled={buttonType === "delete" ? true : false}
        ></input>
      </div>
      <div className="location-input-configuration">
        GEO X
        <input
          defaultValue={buttonType === "create" ? null : getLocationGeoX}
          onChange={handleGeoXChange}
          style={{
            border:
              getLocationGeoX === "" ? "solid red 2px" : "solid black 2px",
          }}
          placeholder={
            getLocationGeoX === "" ? "Please Enter Location Geo X" : ""
          }
          disabled={buttonType === "delete" ? true : false}
        ></input>
      </div>
      <div className="location-input-configuration">
        GEO Y
        <input
          defaultValue={buttonType === "create" ? null : getLocationGeoY}
          onChange={handleGeoYChange}
          style={{
            border:
              getLocationGeoY === "" ? "solid red 2px" : "solid black 2px",
          }}
          placeholder={
            getLocationGeoY === "" ? "Please Enter Location Geo Y" : ""
          }
          disabled={buttonType === "delete" ? true : false}
        ></input>
      </div>
      <ConfirmCancelButton
        setUserConfirm={setUserConfirm}
        switchShowModal={switchShowModal}
      />
    </div>
  );
}
